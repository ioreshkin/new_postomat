import telebot
from telebot import types
import threading
import os
import json
import time
import requests
from datetime import datetime, timedelta

class TelegramVKPostManagerBot:
    CONFIG_DIR = "vk_post_configs"

    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.user_sessions = {}

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs(self.CONFIG_DIR, exist_ok=True)

        self.setup_handlers()

    def get_user_session(self, user_id):
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'account_threads': {},
                'account_status': {},
                'temp_data': {},
                'state': None
            }
        return self.user_sessions[user_id]

    def get_user_configs_dir(self, user_id):
        user_dir = os.path.join(self.CONFIG_DIR, str(user_id))
        os.makedirs(user_dir, exist_ok=True)
        return user_dir

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.show_main_menu(message.chat.id)

        @self.bot.message_handler(func=lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        def main_menu(message):
            self.show_main_menu(message.chat.id)

        @self.bot.message_handler(func=lambda message: message.text == "üöÄ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        def running_configs(message):
            self.show_running_configs(message.chat.id, message.from_user.id)

        @self.bot.message_handler(func=lambda message: message.text == "üÜï –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        def start_config(message):
            self.show_available_configs(message.chat.id, message.from_user.id, action="start")

        @self.bot.message_handler(func=lambda message: message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ")
        def stop_all(message):
            self.stop_all_configs(message.chat.id, message.from_user.id)

        @self.bot.message_handler(func=lambda message: message.text == "üìã –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        def all_configs(message):
            self.show_all_configs_menu(message.chat.id, message.from_user.id)

        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_query(call):
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            data = call.data.split(":")

            if data[0] == "running_config":
                config_name = data[1]
                self.show_running_config_details(chat_id, user_id, config_name)

            elif data[0] == "stop_config":
                config_name = data[1]
                self.stop_config(chat_id, user_id, config_name)
                self.show_running_configs(chat_id, user_id)

            elif data[0] == "start_config":
                config_name = data[1]
                self.prepare_to_start_config(chat_id, user_id, config_name)

            elif data[0] == "select_date":
                config_name = data[1]
                selected_date = data[2]
                self.handle_date_selection(chat_id, user_id, config_name, selected_date)

            elif data[0] == "config_action":
                config_name = data[1]
                action = data[2]

                if action == "view":
                    self.show_config_details(chat_id, user_id, config_name)
                elif action == "edit_text":
                    self.edit_config_text(chat_id, user_id, config_name)
                elif action == "edit_interval":
                    self.edit_config_interval(chat_id, user_id, config_name)
                elif action == "delete":
                    self.delete_config(chat_id, user_id, config_name)

            elif data[0] == "add_config":
                self.add_new_config(chat_id, user_id)

            elif data[0] == "back_to_running":
                self.show_running_configs(chat_id, user_id)

            elif data[0] == "back_to_all_configs":
                self.show_all_configs_menu(chat_id, user_id)

            elif data[0] == "back_to_main":
                self.show_main_menu(chat_id)

            self.bot.answer_callback_query(call.id)

    def show_main_menu(self, chat_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üöÄ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        btn2 = types.KeyboardButton("üÜï –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        btn3 = types.KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ")
        btn4 = types.KeyboardButton("üìã –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        markup.add(btn1, btn2, btn3, btn4)
        self.bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

    def show_running_configs(self, chat_id, user_id):
        session = self.get_user_session(user_id)
        running_configs = []
        user_configs_dir = self.get_user_configs_dir(user_id)

        for key in session['account_threads']:
            token, group_id = key
            for config_file in os.listdir(user_configs_dir):
                if config_file.endswith(".json"):
                    with open(os.path.join(user_configs_dir, config_file), "r") as f:
                        config = json.load(f)
                        if config.get("ACCESS_TOKEN") == token and str(config.get("GROUP_ID")) == str(group_id):
                            running_configs.append(config_file[:-5])

        if not running_configs:
            self.bot.send_message(chat_id, "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
            return

        markup = types.InlineKeyboardMarkup()
        for config_name in running_configs:
            markup.add(types.InlineKeyboardButton(
                text=config_name,
                callback_data=f"running_config:{config_name}"
            ))
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))

        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=markup)

    def show_running_config_details(self, chat_id, user_id, config_name):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            callback_data=f"stop_config:{config_name}"
        ))
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_running"
        ))

        self.bot.send_message(chat_id, f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    def stop_config(self, chat_id, user_id, config_name):
        session = self.get_user_session(user_id)
        user_configs_dir = self.get_user_configs_dir(user_id)
        config_path = os.path.join(user_configs_dir, f"{config_name}.json")

        if not os.path.exists(config_path):
            self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        with open(config_path, "r") as f:
            config = json.load(f)

        key = (config["ACCESS_TOKEN"], str(config["GROUP_ID"]))

        if key in session['account_threads']:
            session['account_status'][key] = False
            del session['account_threads'][key]
            del session['account_status'][key]
            self.bot.send_message(chat_id, f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            self.bot.send_message(chat_id, "–≠—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

    def stop_all_configs(self, chat_id, user_id):
        session = self.get_user_session(user_id)

        if not session['account_threads']:
            self.bot.send_message(chat_id, "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
            return

        for key in list(session['account_threads'].keys()):
            session['account_status'][key] = False
            del session['account_threads'][key]
            del session['account_status'][key]

        self.bot.send_message(chat_id, "–í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    def show_available_configs(self, chat_id, user_id, action="start"):
        user_configs_dir = self.get_user_configs_dir(user_id)
        all_configs = [f[:-5] for f in os.listdir(user_configs_dir) if f.endswith(".json")]

        if not all_configs:
            self.bot.send_message(chat_id,
                                  "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ '–í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'.")
            return

        session = self.get_user_session(user_id)
        running_keys = set(session['account_threads'].keys())
        running_configs = []

        for config_file in os.listdir(user_configs_dir):
            if config_file.endswith(".json"):
                with open(os.path.join(user_configs_dir, config_file), "r") as f:
                    config = json.load(f)
                    key = (config["ACCESS_TOKEN"], str(config["GROUP_ID"]))
                    if key in running_keys:
                        running_configs.append(config_file[:-5])

        available_configs = [c for c in all_configs if c not in running_configs]

        if not available_configs:
            self.bot.send_message(chat_id, "–í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã.")
            return

        markup = types.InlineKeyboardMarkup()
        for config_name in available_configs:
            markup.add(types.InlineKeyboardButton(
                text=config_name,
                callback_data=f"start_config:{config_name}"
            ))
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))

        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=markup)

    def prepare_to_start_config(self, chat_id, user_id, config_name):
        session = self.get_user_session(user_id)
        session['temp_data'] = {"config_name": config_name}
        session['state'] = "preparing_to_start"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="–°–µ–≥–æ–¥–Ω—è",
            callback_data=f"select_date:{config_name}:today"
        ))
        markup.add(types.InlineKeyboardButton(
            text="–ó–∞–≤—Ç—Ä–∞",
            callback_data=f"select_date:{config_name}:tomorrow"
        ))
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))

        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=markup)

    def handle_date_selection(self, chat_id, user_id, config_name, selected_date):
        session = self.get_user_session(user_id)

        if selected_date == "today":
            post_date = datetime.now()
        else:
            post_date = datetime.now() + timedelta(days=1)

        session['temp_data']["post_date"] = post_date
        session['state'] = "waiting_time"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"start_config:{config_name}"
        ))

        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 13:30 –∏–ª–∏ 14:00-15:30):",
                              reply_markup=markup)

    def process_time_input(self, message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        session = self.get_user_session(user_id)

        if session['state'] != "waiting_time":
            return

        try:
            time_str = message.text
            config_name = session['temp_data']["config_name"]
            user_configs_dir = self.get_user_configs_dir(user_id)
            config_path = os.path.join(user_configs_dir, f"{config_name}.json")

            if not os.path.exists(config_path):
                self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            with open(config_path, "r") as f:
                config = json.load(f)

            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è)
            post_text = config["POST_TEXT"]
            post_text = self.replace_placeholders(post_text, session['temp_data']["post_date"], time_str)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            key = (config["ACCESS_TOKEN"], str(config["GROUP_ID"]))
            interval = int(config["INTERVAL"])

            session['account_status'][key] = True
            thread = threading.Thread(
                target=self.post_to_vk,
                args=(user_id, key, post_text, interval),
                daemon=True
            )
            session['account_threads'][key] = thread
            thread.start()

            self.bot.send_message(chat_id, f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name} –∑–∞–ø—É—â–µ–Ω–∞! –í—Ä–µ–º—è: {time_str}")
            session['state'] = None
            session['temp_data'] = {}
            self.show_main_menu(message.chat.id)

        except Exception as e:
            self.bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def remove_existing_posts(self, token, group_id):
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = requests.post(
                "https://api.vk.ru/method/users.get",
                params={
                    "access_token": token,
                    "v": "5.131"
                }
            ).json()

            current_user_id = user_info["response"][0]["id"]
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤
            response = requests.post(
                "https://api.vk.ru/method/wall.get",
                params={
                    "access_token": token,
                    "owner_id": f"-{group_id}",
                    "count": 10,
                    "v": "5.131",
                }
            ).json()

            posts = response.get("response", {}).get("items", [])
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã
            for post in posts:
                if post.get("from_id") == current_user_id:
                    requests.post(
                        "https://api.vk.ru/method/wall.delete",
                        params={
                            "access_token": token,
                            "owner_id": f"-{group_id}",
                            "post_id": post["id"],
                            "v": "5.131",
                        }
                    )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}")

    def replace_placeholders(self, text, post_date, time_str):
        weekdays = [
            "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫", "–≤ —Å—Ä–µ–¥—É",
            "–≤ —á–µ—Ç–≤–µ—Ä–≥", "–≤ –ø—è—Ç–Ω–∏—Ü—É", "–≤ —Å—É–±–±–æ—Ç—É", "–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        ]

        replacements = {
            "<time>": time_str,
            "<day>": post_date.strftime("%d.%m"),
            "<weekday>": weekdays[post_date.weekday()]
        }

        for placeholder, value in replacements.items():
            text = text.replace(placeholder, value)

        return text

    def show_all_configs_menu(self, chat_id, user_id):
        user_configs_dir = self.get_user_configs_dir(user_id)
        configs = [f[:-5] for f in os.listdir(user_configs_dir) if f.endswith(".json")]

        markup = types.InlineKeyboardMarkup()

        if configs:
            for config_name in configs:
                markup.add(types.InlineKeyboardButton(
                    text=config_name,
                    callback_data=f"config_action:{config_name}:view"
                ))

        markup.add(types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            callback_data="add_config"
        ))
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))

        self.bot.send_message(chat_id, "–í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=markup)

    def show_config_details(self, chat_id, user_id, config_name):
        user_configs_dir = self.get_user_configs_dir(user_id)
        config_path = os.path.join(user_configs_dir, f"{config_name}.json")

        if not os.path.exists(config_path):
            self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        with open(config_path, "r") as f:
            config = json.load(f)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç",
            callback_data=f"config_action:{config_name}:edit_text"
        ))
        markup.add(types.InlineKeyboardButton(
            text="‚åö –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª",
            callback_data=f"config_action:{config_name}:edit_interval"
        ))
        markup.add(types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"config_action:{config_name}:delete"
        ))
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_all_configs"
        ))

        response = (
            f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}\n"
            f"–¢–æ–∫–µ–Ω: {config.get('ACCESS_TOKEN', '')}\n"
            f"ID –≥—Ä—É–ø–ø—ã: {config.get('GROUP_ID', '')}\n"
            f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{config.get('POST_TEXT', '')}"
            f"\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {config.get('INTERVAL', '')}"
        )

        self.bot.send_message(chat_id, response, reply_markup=markup)

    def edit_config_text(self, chat_id, user_id, config_name):
        user_configs_dir = self.get_user_configs_dir(user_id)
        config_path = os.path.join(user_configs_dir, f"{config_name}.json")

        if not os.path.exists(config_path):
            self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        session = self.get_user_session(user_id)
        session['state'] = f"editing_text:{config_name}"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"config_action:{config_name}:view"
        ))

        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∫–∏ <time>, <day>, <weekday>):",
                              reply_markup=markup)

    def edit_config_interval(self, chat_id, user_id, config_name):
        user_configs_dir = self.get_user_configs_dir(user_id)
        config_path = os.path.join(user_configs_dir, f"{config_name}.json")

        if not os.path.exists(config_path):
            self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        session = self.get_user_session(user_id)
        session['state'] = f"editing_interval:{config_name}"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"config_action:{config_name}:view"
        ))

        self.bot.send_message(chat_id,
                              "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):",
                              reply_markup=markup)

    def process_text_edit(self, message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        session = self.get_user_session(user_id)

        if not session['state'] or not session['state'].startswith("editing_text:"):
            return

        config_name = session['state'].split(":")[1]
        user_configs_dir = self.get_user_configs_dir(user_id)
        config_path = os.path.join(user_configs_dir, f"{config_name}.json")

        if not os.path.exists(config_path):
            self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        with open(config_path, "r") as f:
            config = json.load(f)

        config["POST_TEXT"] = message.text

        with open(config_path, "w") as f:
            json.dump(config, f)

        self.bot.send_message(chat_id, "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        session['state'] = None
        self.show_config_details(chat_id, user_id, config_name)

    def process_interval_edit(self, message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        session = self.get_user_session(user_id)

        if not session['state'] or not session['state'].startswith("editing_interval:"):
            return

        config_name = session['state'].split(":")[1]
        user_configs_dir = self.get_user_configs_dir(user_id)
        config_path = os.path.join(user_configs_dir, f"{config_name}.json")

        if not os.path.exists(config_path):
            self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        with open(config_path, "r") as f:
            config = json.load(f)

        config["INTERVAL"] = message.text

        with open(config_path, "w") as f:
            json.dump(config, f)

        self.bot.send_message(chat_id, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        session['state'] = None
        self.show_config_details(chat_id, user_id, config_name)

    def delete_config(self, chat_id, user_id, config_name):
        session = self.get_user_session(user_id)
        user_configs_dir = self.get_user_configs_dir(user_id)
        config_path = os.path.join(user_configs_dir, f"{config_name}.json")

        if not os.path.exists(config_path):
            self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        with open(config_path, "r") as f:
            config = json.load(f)

        key = (config["ACCESS_TOKEN"], str(config["GROUP_ID"]))

        if key in session['account_threads']:
            self.bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
            return

        os.remove(config_path)
        self.bot.send_message(chat_id, f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name} —É–¥–∞–ª–µ–Ω–∞.")
        self.show_all_configs_menu(chat_id, user_id)

    def add_new_config(self, chat_id, user_id):
        session = self.get_user_session(user_id)
        session['state'] = "adding_config:name"
        session['temp_data'] = {}

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_all_configs"
        ))

        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=markup)

    def process_config_creation(self, message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        session = self.get_user_session(user_id)

        if not session['state'] or not session['state'].startswith("adding_config:"):
            return

        current_step = session['state'].split(":")[1]

        if current_step == "name":
            config_name = message.text
            user_configs_dir = self.get_user_configs_dir(user_id)

            if f"{config_name}.json" in os.listdir(user_configs_dir):
                self.bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                return

            session['temp_data']['name'] = config_name
            session['state'] = "adding_config:token"

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="add_config"
            ))

            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω VK:", reply_markup=markup)

        elif current_step == "token":
            session['temp_data']['token'] = message.text
            session['state'] = "adding_config:group_id"

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="add_config"
            ))

            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã:", reply_markup=markup)

        elif current_step == "group_id":
            try:
                group_id = int(message.text)
                session['temp_data']['group_id'] = group_id
                session['state'] = "adding_config:text"

                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="add_config"
                ))

                self.bot.send_message(chat_id,
                                      "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∫–∏ <time>, <day>, <weekday>):",
                                      reply_markup=markup)
            except ValueError:
                self.bot.send_message(chat_id, "ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")

        elif current_step == "text":
            session['temp_data']['text'] = message.text
            session['state'] = "adding_config:interval"

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="add_config"
            ))

            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):", reply_markup=markup)

        elif current_step == "interval":
            try:
                interval = int(message.text)
                if interval <= 0:
                    raise ValueError

                config_data = {
                    "ACCESS_TOKEN": session['temp_data']['token'],
                    "GROUP_ID": session['temp_data']['group_id'],
                    "POST_TEXT": session['temp_data']['text'],
                    "INTERVAL": interval
                }

                user_configs_dir = self.get_user_configs_dir(user_id)
                config_path = os.path.join(user_configs_dir, f"{session['temp_data']['name']}.json")
                with open(config_path, "w") as f:
                    json.dump(config_data, f)

                self.bot.send_message(chat_id, f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {session['temp_data']['name']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                session['state'] = None
                session['temp_data'] = {}

                self.show_all_configs_menu(chat_id, user_id)

            except ValueError:
                self.bot.send_message(chat_id,
                                      "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

    def post_to_vk(self, user_id, key, message, interval):
        token, group_id = key
        session = self.get_user_session(user_id)
        status = session['account_status'].get(key, False)
        if (status): self.remove_existing_posts(token, group_id)

        while status:
            try:
                # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                post_url = "https://api.vk.ru/method/wall.post"
                post_params = {
                    "access_token": token,
                    "owner_id": f"-{group_id}",
                    "message": message,
                    "v": "5.131",
                }
                response = requests.post(post_url, params=post_params).json()

                if "error" in response:
                    print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response['error']['error_msg']}")
                    break

                print(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {response['response']['post_id']}")
                status = session['account_status'].get(key, False)

                time.sleep(interval * 60)

                self.remove_existing_posts(token, group_id)

            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                break

    def run(self):
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            user_id = message.from_user.id
            chat_id = message.chat.id
            session = self.get_user_session(user_id)

            if session['state']:
                if session['state'] == "waiting_time":
                    self.process_time_input(message)
                elif session['state'].startswith("editing_text:"):
                    self.process_text_edit(message)
                elif session['state'].startswith("editing_interval:"):
                    self.process_interval_edit(message)
                elif session['state'].startswith("adding_config:"):
                    self.process_config_creation(message)
                else:
                    self.show_main_menu(chat_id)
            else:
                self.show_main_menu(chat_id)

        self.bot.polling(none_stop=True)

if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    bot = TelegramVKPostManagerBot('8411053706:AAEVLWMhJr_cNrl-yInK3ibyMt6awNUd0X4')
    bot.run()
